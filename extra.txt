
import React, {useState} from "react";

 export default function About () {

  
  const[myStyle, setMyStyle] = useState({
    color: "black",
    backgroundColor: "white"
});

const[setText, setBtnText] = useState("Enable Dark mode");

const toggleStyle = ()=>{
if(myStyle.color === "black"){
        setMyStyle({
            color: "white",
    backgroundColor: "black"
        });
        setBtnText("Enable Dark Mode")
    }else{
        setMyStyle({
            color: "black",
        backgroundColor: "white",
    })
    setBtnText("Enable White Mode")
};

 return(
 <>
    <div className="container" >
        <h1>About Us</h1>
        <div className="accordion" id="accordionExample" >
  <div className="accordion-item">
    <h2 className="accordion-header" id="headingOne">
      <button className="accordion-button"  type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
        Accordion Item #1
      </button>
    </h2>
    <div id="collapseOne" className="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
      <div className="accordion-body">
        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
      </div>
    </div>
  </div>
  <div className="accordion-item">
    <h2 className="accordion-header" id="headingTwo">
      <button className="accordion-button collapsed"  type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
        Accordion Item #2
      </button>
    </h2>
    <div id="collapseTwo" className="accordion-collapse collapse" aria-labelledby="headingTwo" data-bs-parent="#accordionExample">
      <div className="accordion-body">
        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
      </div>
    </div>
  </div>
  <div className="accordion-item">
    <h2 className="accordion-header" id="headingThree">
      <button className="accordion-button collapsed"  type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
        Accordion Item #3
      </button>
    </h2>
    <div id="collapseThree" className="accordion-collapse collapse" aria-labelledby="headingThree" data-bs-parent="#accordionExample">
      <div className="accordion-body">
        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
      </div>
    </div>
  </div>
</div>
<button onClick={toggleStyle} className="btn btn-primary btn-large my-3">{setText}</button>
    </div>
    </>
 )
 }

for more modes=>

  // const greenMode = ()=>{
  //   if(mode === "light" || mode === "red" || mode === "blue" || mode === "green"){
  //     changeMode("lightgreen");
  //     document.body.style.backgroundColor=("lightgreen")
  //     showAlert("Dark mode has been enabled", "success")
  //   }else{
  //     changeMode("light")
  //     document.body.style.backgroundColor=("white")
  //     showAlert("Dark mode has been Disabled", "success")
  //   }
  // }
  // const redMode = ()=>{
  //   if(mode === "light" || mode === "red" || mode === "blue" || mode === "green"){
  //     changeMode("dark");
  //     document.body.style.backgroundColor=("red")
  //     showAlert("Dark mode has been enabled", "success")
  //   }else{
  //     changeMode("light")
  //     document.body.style.backgroundColor=("white")
  //     showAlert("Dark mode has been Disabled", "success")
  //   }
  // }
  // const blueMode = ()=>{
  //   if(mode === "light"){
  //     changeMode("dark");
  //     document.body.style.backgroundColor=("blue")
  //     showAlert("Dark mode has been enabled", "success")
  //   }else{
  //     changeMode("light")
  //     document.body.style.backgroundColor=("white")
  //     showAlert("Dark mode has been Disabled", "success")
  //   }
  // }
  // const darkMode = ()=>{
  //   if(mode === "light"){
  //     changeMode("dark");
  //     document.body.style.backgroundColor=("#434C46")
  //     showAlert("Dark mode has been enabled", "success")
  //   }else{
  //     changeMode("light")
  //     document.body.style.backgroundColor=("white")
  //     showAlert("Dark mode has been Disabled", "success")
  //   }
  // }
 
// const btncolour = ()=>{
//   if(mode ==="green"){
//     setBtnColor("success")
//   }
//   else if(mode ==="red"){
//     setBtnColor("danger")
//   }
//   else if (mode ==="blue"){
//       setBtnColor("primary")
//   }
//   else if(mode ==="lightblue"){
//     setBtnColor("info")
//   }
//   else if (mode ==="dark"){
//     setBtnColor("dark")
//   }
//   else{
//     setBtnColor("primary")
//   }
//   }


buttons in navbar=>
{/* <div className={`form-check form-switch text-${props.mode === "light"?"dark":"light"}`}>
        <input className="form-check-input mx-1" onClick={props.blueMode} type="checkbox" role="switch" id="flexSwitchCheckDefault"/>
        <label className="form-check-label" htmlFor="flexSwitchCheckDefault">Enable blue Mode</label>
        </div>
        <div className={`form-check form-switch text-${props.mode === "light"?"dark":"light"}`}>
        <input className="form-check-input mx-1" onClick={props.redMode} type="checkbox" role="switch" id="flexSwitchCheckDefault"/>
        <label className="form-check-label" htmlFor="flexSwitchCheckDefault">Enable red Mode</label>
        </div>
        <div className={`form-check form-switch text-${props.mode === "light"?"black":"light"}`}>
        <input className="form-check-input mx-1" onClick={props.greenMode} type="checkbox" role="switch" id="flexSwitchCheckDefault"/>
        <label className="form-check-label " htmlFor="flexSwitchCheckDefault ">Enable green Mode</label>
        </div> */}
















 <TextForm heading= "Enter the text to convert below" label="enter text here"/>